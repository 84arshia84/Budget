// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250915135503_AddAccessGroupaa")]
    partial class AddAccessGroupaa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.AccessGroup.AccessGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessGroups");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroupFundingSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccessGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("FundingSourceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.ToTable("AccessGroupFundingSources");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroupProperties", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccessGroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("FundingSourceCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("FundingSourceDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("FundingSourceEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("FundingSourceView")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestTypeCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestTypeDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestTypeEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestTypeView")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestingDepartmentCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestingDepartmentDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestingDepartmentEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestingDepartmentView")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId")
                        .IsUnique();

                    b.ToTable("AccessGroupProperties");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroupRequestType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccessGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.ToTable("AccessGroupRequestTypes");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroupRequestingDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccessGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestingDepartmentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.ToTable("AccessGroupRequestingDepartments");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroupUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccessGroupId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupId");

                    b.ToTable("AccessGroupUsers");
                });

            modelBuilder.Entity("Domain.AccessGroup.DepartmentAccessgroupSystemParts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessGroupEnum")
                        .HasColumnType("int");

                    b.Property<long>("AccessGroupid")
                        .HasColumnType("bigint");

                    b.Property<int>("SystemParts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessGroupid");

                    b.ToTable("DepartmentAccessgroupSystemParts");
                });

            modelBuilder.Entity("Domain.ActionBudgetRequestEntity.ActionBudgetRequestEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BudgetAmountPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BudgetRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetRequestId");

                    b.ToTable("ActionBudgetRequestEntitys");
                });

            modelBuilder.Entity("Domain.Allocation.Allocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BudgetRequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetRequestId");

                    b.ToTable("Allocations");
                });

            modelBuilder.Entity("Domain.AllocationActionBudgetRequest.AllocationActionBudgetRequest", b =>
                {
                    b.Property<long>("AllocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActionBudgetRequestEntityId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("AllocatedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AllocationId", "ActionBudgetRequestEntityId");

                    b.HasIndex("ActionBudgetRequestEntityId");

                    b.ToTable("AllocationActionBudgetRequests");
                });

            modelBuilder.Entity("Domain.BudgetRequest.BudgetRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FundingSourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestingDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("budgetEstimationRanges")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FundingSourceId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("RequestingDepartmentId");

                    b.ToTable("BudgetRequests");
                });

            modelBuilder.Entity("Domain.FundingSource.FundingSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FundingSources");
                });

            modelBuilder.Entity("Domain.Payment.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AllocationId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AllocationId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.PaymentMethod.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Domain.RequestType.RequestType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");
                });

            modelBuilder.Entity("Domain.RequestingDepartment.RequestingDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestingDepartments");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroupFundingSource", b =>
                {
                    b.HasOne("Domain.AccessGroup.AccessGroup", "AccessGroup")
                        .WithMany("FundingSources")
                        .HasForeignKey("AccessGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessGroup");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroupProperties", b =>
                {
                    b.HasOne("Domain.AccessGroup.AccessGroup", "AccessGroup")
                        .WithOne("Properties")
                        .HasForeignKey("Domain.AccessGroup.AccessGroupProperties", "AccessGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessGroup");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroupRequestType", b =>
                {
                    b.HasOne("Domain.AccessGroup.AccessGroup", "AccessGroup")
                        .WithMany("RequestTypes")
                        .HasForeignKey("AccessGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessGroup");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroupRequestingDepartment", b =>
                {
                    b.HasOne("Domain.AccessGroup.AccessGroup", "AccessGroup")
                        .WithMany("RequestingDepartments")
                        .HasForeignKey("AccessGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessGroup");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroupUser", b =>
                {
                    b.HasOne("Domain.AccessGroup.AccessGroup", "AccessGroup")
                        .WithMany("Users")
                        .HasForeignKey("AccessGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessGroup");
                });

            modelBuilder.Entity("Domain.AccessGroup.DepartmentAccessgroupSystemParts", b =>
                {
                    b.HasOne("Domain.AccessGroup.AccessGroup", "AccessGroup")
                        .WithMany("DepartmentAccessgroupSystemParts")
                        .HasForeignKey("AccessGroupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessGroup");
                });

            modelBuilder.Entity("Domain.ActionBudgetRequestEntity.ActionBudgetRequestEntity", b =>
                {
                    b.HasOne("Domain.BudgetRequest.BudgetRequest", "BudgetRequest")
                        .WithMany("ActionBudgetRequestEntity")
                        .HasForeignKey("BudgetRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BudgetRequest");
                });

            modelBuilder.Entity("Domain.Allocation.Allocation", b =>
                {
                    b.HasOne("Domain.BudgetRequest.BudgetRequest", "BudgetRequest")
                        .WithMany("Allocations")
                        .HasForeignKey("BudgetRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BudgetRequest");
                });

            modelBuilder.Entity("Domain.AllocationActionBudgetRequest.AllocationActionBudgetRequest", b =>
                {
                    b.HasOne("Domain.ActionBudgetRequestEntity.ActionBudgetRequestEntity", "ActionBudgetRequestEntity")
                        .WithMany()
                        .HasForeignKey("ActionBudgetRequestEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Allocation.Allocation", "Allocation")
                        .WithMany("AllocationActionBudgetRequests")
                        .HasForeignKey("AllocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionBudgetRequestEntity");

                    b.Navigation("Allocation");
                });

            modelBuilder.Entity("Domain.BudgetRequest.BudgetRequest", b =>
                {
                    b.HasOne("Domain.FundingSource.FundingSource", "FundingSource")
                        .WithMany("BudgetRequests")
                        .HasForeignKey("FundingSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.RequestType.RequestType", "RequestType")
                        .WithMany("BudgetRequests")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.RequestingDepartment.RequestingDepartment", "RequestingDepartment")
                        .WithMany("BudgetRequests")
                        .HasForeignKey("RequestingDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FundingSource");

                    b.Navigation("RequestType");

                    b.Navigation("RequestingDepartment");
                });

            modelBuilder.Entity("Domain.Payment.Payment", b =>
                {
                    b.HasOne("Domain.Allocation.Allocation", "Allocation")
                        .WithMany()
                        .HasForeignKey("AllocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PaymentMethod.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Allocation");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.AccessGroup.AccessGroup", b =>
                {
                    b.Navigation("DepartmentAccessgroupSystemParts");

                    b.Navigation("FundingSources");

                    b.Navigation("Properties")
                        .IsRequired();

                    b.Navigation("RequestTypes");

                    b.Navigation("RequestingDepartments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Allocation.Allocation", b =>
                {
                    b.Navigation("AllocationActionBudgetRequests");
                });

            modelBuilder.Entity("Domain.BudgetRequest.BudgetRequest", b =>
                {
                    b.Navigation("ActionBudgetRequestEntity");

                    b.Navigation("Allocations");
                });

            modelBuilder.Entity("Domain.FundingSource.FundingSource", b =>
                {
                    b.Navigation("BudgetRequests");
                });

            modelBuilder.Entity("Domain.RequestType.RequestType", b =>
                {
                    b.Navigation("BudgetRequests");
                });

            modelBuilder.Entity("Domain.RequestingDepartment.RequestingDepartment", b =>
                {
                    b.Navigation("BudgetRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
